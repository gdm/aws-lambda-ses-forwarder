AWSTemplateFormatVersion: '2010-09-09'
Description: SES configs for email rules setup
Parameters:
  ConfigSetName:
    Type: String
  DomainRuleSetName:
    Type: String
  DomainName:
    Type: String

Resources:

  EmailsS3Bucket:
    Type: AWS::S3::Bucket

  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailsS3Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:PutObject"
            Effect: "Allow"
            Resource: !Join ['', ['arn:aws:s3:::', !Ref EmailsS3Bucket, '/*' ]]
            Principal:
              Service: [ses.amazonaws.com]
            Condition:
              StringEquals:
                aws:Referer: !Ref 'AWS::AccountId'


  ConfigSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Ref ConfigSetName

  ReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: !Ref DomainRuleSetName

  EmailsS3BucketCode:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: info-contrall-code
      VersioningConfiguration:
        Status: Enabled

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action:
                - ses:SendRawEmail
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref EmailsS3Bucket, '/*' ]]

  lambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Code:
        S3Bucket: info-contrall-code
        S3Key: lambda-forwarder/v1/function.zip
      MemorySize: 128
      Timeout: 8
      Description: Test function
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt lambdaFunc.Arn
      Action: 'lambda:InvokeFunction'
      Principal: "*"
      SourceAccount: !Ref 'AWS::AccountId'

  ReceiptRule1:
    Type: AWS::SES::ReceiptRule
    Properties:
      Rule:
        Actions:
          - 
           S3Action:
             BucketName: !Ref EmailsS3Bucket
             ObjectKeyPrefix: forwarder
          - 
           LambdaAction:
             FunctionArn: !GetAtt lambdaFunc.Arn
             InvocationType: Event
        Enabled: true
        Name: "ForwardAll"
        ScanEnabled: false
        Recipients:
          - !Join [ '@', [ 'test123', !Ref DomainName ] ]
          - !Join [ '@', [ 'test124', !Ref DomainName ] ]
      RuleSetName: !Ref DomainRuleSetName
  
